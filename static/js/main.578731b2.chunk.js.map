{"version":3,"sources":["components/Form/Form.js","components/Result/Result.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","type","placeholder","value","onChange","change","Result","_props$weather","weather","err","city","temp","pressure","wind","sunrise","sunset","date","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","Fragment","className","concat","toUpperCase","App","state","weatherIcon","handleInputChange","e","_this","setState","target","prevProps","prevState","_this2","this","length","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","console","log","components_Form_Form","components_Result_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.578731b2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Form.css\";\r\nconst Form = (props) => {\r\n  return (\r\n    <form>\r\n      <h2>Enter the name of city</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"City name\"\r\n        value={props.value}\r\n        onChange={props.change}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./Result.css\";\r\nconst Result = (props) => {\r\n  const {\r\n    err,\r\n    city,\r\n    temp,\r\n    pressure,\r\n    wind,\r\n    sunrise,\r\n    sunset,\r\n    weather,\r\n    date,\r\n  } = props.weather;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n    content = (\r\n      <>\r\n        <p>\r\n          <span>Results for:</span> {city}\r\n        </p>{\" \"}\r\n        <hr />\r\n        <p>\r\n          <span>Date and data time:</span> {date}\r\n        </p>\r\n        <p>\r\n          <span>Weather:</span> {weather}\r\n        </p>\r\n        <p>\r\n          <span>Temperature:</span> {temp} &#176;C\r\n        </p>\r\n        <p>\r\n          <span>Sunrise: </span>\r\n          {sunriseTime}\r\n        </p>\r\n        <p>\r\n          <span>Sunset:</span> {sunsetTime}\r\n        </p>\r\n        <p>\r\n          <span>Wind:</span> {wind} m/s\r\n        </p>\r\n        <p>\r\n          <span>Pressure:</span> {pressure} hPa\r\n        </p>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"result\">\r\n      {err ? `We can't find data of ${city.toUpperCase()}` : content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\nimport Form from \"./components/Form/Form\";\nimport Result from \"./components/Result/Result\";\nimport \"./App.css\";\n\nconst APIKey = \"1cdab72c35fc34cc944756e642515940\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    weather: \"\",\n    weatherIcon: \"\",\n    err: \"\",\n  };\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.value.length === 0) return;\n    if (prevState.value !== this.state.value) {\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n      fetch(API)\n        .then((response) => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error(\"nie udalo sie\");\n        })\n        .then((response) => response.json())\n        .then((data) => {\n          const time = new Date().toLocaleString();\n          this.setState((prevState) => ({\n            err: false,\n            date: time,\n            city: this.state.value.toUpperCase(),\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            weather: data[\"weather\"][\"0\"][\"description\"],\n          }));\n        })\n        .catch((err) => {\n          console.log(err);\n          this.setState((prevState) => ({\n            err: true,\n            city: prevState.value,\n          }));\n        });\n    }\n  }\n  render() {\n    return (\n      <div className=\"app\">\n        <Form value={this.state.value} change={this.handleInputChange} />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}